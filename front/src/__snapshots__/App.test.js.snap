// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App.js the user submits the login form the user inputs a valid token should match snapshot 1`] = `
.c20 {
  background: #ffcc00;
  padding: 0.6rem 3rem 0.6rem 0.6rem;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  color: #FFFFFF;
  position: relative;
}

.c21 {
  text-transform: uppercase;
  margin: 0;
  display: block;
  font-size: 1.4rem;
}

.c22 {
  padding-left: 2rem;
  position: absolute;
  top: 50%;
  right: 1rem;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.c23 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  margin: 0rem;
}

.c24 {
  margin: 0rem;
  -webkit-flex-basis: 50%;
  -ms-flex-preferred-size: 50%;
  flex-basis: 50%;
}

.c26 {
  background: #ededed;
  width: 100%;
  font-size: 2rem;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c26:active {
  background: #c0c0c0;
}

.c28 {
  font-size: 5rem;
  padding: 3rem;
  -webkit-flex-basis: 50%;
  -ms-flex-preferred-size: 50%;
  flex-basis: 50%;
}

.c25 {
  height: 50%;
}

.c27 {
  height: 50%;
}

.c19 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c9 {
  background-color: #ff00ff;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  font-size: 4rem;
  padding: 1.5rem 0;
  border: 0.2rem solid;
  border-color: #c800c8;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.c9:active {
  background-color: #c800c8;
}

.c10 {
  background-color: #00ffff;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  font-size: 4rem;
  padding: 1.5rem 0;
  border: 0.2rem solid;
  border-color: #00c8c8;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.c10:active {
  background-color: #00c8c8;
}

.c6 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: space-around;
  -webkit-justify-content: space-around;
  -ms-flex-pack: space-around;
  justify-content: space-around;
  -webkit-flex-wrap: no-wrap;
  -ms-flex-wrap: no-wrap;
  flex-wrap: no-wrap;
  padding-top: 2rem;
}

.c7 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  max-width: 12rem;
}

.c8 {
  font-size: 2.5rem;
  -webkit-flex-basis: 50%;
  -ms-flex-preferred-size: 50%;
  flex-basis: 50%;
  max-width: 6rem;
  max-height: 6rem;
}

.c8:nth-child(odd) {
  border-right: none;
}

.c8:nth-child(3),
.c8:nth-child(4) {
  border-top: none;
  border-bottom: none;
}

.c13 {
  height: 25%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c14 {
  background-color: #ededed;
  height: 75%;
  width: 25%;
  border: 0.25rem solid;
  font-size: 2rem;
  margin: auto;
}

.c14:active {
  background-color: #c0c0c0;
}

.c16 {
  width: 50%;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c17 {
  background-color: #ededed;
  height: 4rem;
  width: 75%;
  margin-left: auto;
  margin-right: auto;
  border: 0.25rem solid;
  font-size: 2rem;
  display: block;
}

.c17:active {
  background-color: #c0c0c0;
}

.c15 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c12 {
  margin: 0.5rem;
}

.c11 {
  height: 50%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  padding: 0.5rem;
}

.c4 {
  margin-left: auto;
  margin-right: auto;
  height: 4rem;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 15%;
  width: 100%;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  overflow-x: auto;
  -webkit-align-content: space-between;
  -ms-flex-line-pack: space-between;
  align-content: space-between;
  border-style: solid;
  border-width: 0rem 0rem 0.2rem 0rem;
  margin-bottom: 0.2rem;
  background: #ededed;
}

.c0 {
  height: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c2 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  overflow-y: auto;
  overflow-x: hidden;
}

.c18 {
  height: 100%;
}

.c5 {
  position: -webkit-sticky;
  position: sticky;
  bottom: 0;
  width: 100%;
  margin: 0;
}

@media (min-width:768px) {
  .c25 {
    height: 100%;
    padding: 3rem;
    font-size: 5rem;
  }
}

@media (min-width:768px) {
  .c27 {
    display: none;
  }
}

@media (min-width:576px) {
  .c6 {
    padding-top: 0;
  }
}

@media (min-width:376px) {
  .c7 {
    max-width: 16rem;
  }
}

@media (min-width:376px) {
  .c8 {
    font-size: 4rem;
  }
}

@media (min-width:376px) {
  .c8 {
    max-width: 8rem;
    max-height: 8rem;
    font-size: 4rem;
  }
}

@media (min-width:768px) {
  .c1 {
    width: 80%;
    margin: 2rem auto 1rem auto;
    border-width: 0;
  }
}

<App>
  <ThemeProvider
    theme={
      Object {
        "button": "#ededed",
        "buttonActive": "#c0c0c0",
        "buttonBorder": "#ededed",
        "buttonBorderStyle": "solid",
        "buttonBorderStyleActive": "inset",
        "connectionStatusText": "#FFFFFF",
        "error": "#ff6347",
        "loginButton": "#FFFFFF",
        "loginButtonActive": "#ededed",
        "loginFormBackground": "#ededed",
        "loginScreenBackground": "#c0c0c0",
        "refboxCyan": "#00ffff",
        "refboxCyanActive": "#00c8c8",
        "refboxCyanBorder": "#00c8c8",
        "refboxMagenta": "#ff00ff",
        "refboxMagentaActive": "#c800c8",
        "refboxMagentaBorder": "#c800c8",
        "success": "#45bc21",
        "turtleEnableBar": "#ededed",
        "warning": "#ffcc00",
      }
    }
  >
    <styled.div>
      <div
        className="c0"
      >
        <TurtleEnableBar
          onTurtleEnableChange={[Function]}
          turtles={Array []}
        >
          <styled.div>
            <div
              className="c1"
            />
          </styled.div>
        </TurtleEnableBar>
        <styled.div>
          <div
            className="c2"
          >
            <Settings
              session="session"
              turtles={Object {}}
            >
              <styled.div>
                <div
                  className="c3"
                >
                  <TurtleList
                    session="session"
                    turtles={Object {}}
                  >
                    <Grid>
                      <div
                        className="container"
                      >
                        <Row>
                          <div
                            className="row"
                          />
                        </Row>
                      </div>
                    </Grid>
                  </TurtleList>
                  <Styled(Dropdown)
                    enabled={true}
                    id="settings_role-dropdown"
                    onChange={[Function]}
                    values={
                      Array [
                        "Role assigner on",
                        "Role assigner off",
                        "Pass demo",
                        "Penalty mode",
                        "Ball Handling demo",
                      ]
                    }
                  >
                    <Dropdown
                      className="c4"
                      enabled={true}
                      id="settings_role-dropdown"
                      onChange={[Function]}
                      values={
                        Array [
                          "Role assigner on",
                          "Role assigner off",
                          "Pass demo",
                          "Penalty mode",
                          "Ball Handling demo",
                        ]
                      }
                    >
                      <select
                        className="c4"
                        disabled={false}
                        onChange={[Function]}
                      >
                        <option
                          key="Role assigner on"
                        >
                          Role assigner on
                        </option>
                        <option
                          key="Role assigner off"
                        >
                          Role assigner off
                        </option>
                        <option
                          key="Pass demo"
                        >
                          Pass demo
                        </option>
                        <option
                          key="Penalty mode"
                        >
                          Penalty mode
                        </option>
                        <option
                          key="Ball Handling demo"
                        >
                          Ball Handling demo
                        </option>
                      </select>
                    </Dropdown>
                  </Styled(Dropdown)>
                </div>
              </styled.div>
            </Settings>
          </div>
        </styled.div>
        <styled.div>
          <div
            className="c5"
          >
            <Row
              bottom="xs"
            >
              <div
                className="row bottom-xs"
              >
                <Col
                  className="hidden-xs hidden-sm"
                  md={4}
                >
                  <div
                    className="col-md-4 hidden-xs hidden-sm"
                  >
                    <RefboxField
                      isPenalty={false}
                      session="session"
                    >
                      <styled.div>
                        <div
                          className="c6"
                        >
                          <styled.div>
                            <div
                              className="c7"
                            >
                              <Styled(RefboxButton)
                                id="KO_magenta"
                                isPenalty={false}
                                key="KO"
                                onClick={[Function]}
                                teamColor="magenta"
                              >
                                <RefboxButton
                                  className="c8"
                                  id="KO_magenta"
                                  isPenalty={false}
                                  onClick={[Function]}
                                  teamColor="magenta"
                                >
                                  <styled.button
                                    className="c8"
                                    onClick={[Function]}
                                    teamColor="magenta"
                                  >
                                    <button
                                      className="c8 c9"
                                      onClick={[Function]}
                                    >
                                      KO
                                    </button>
                                  </styled.button>
                                </RefboxButton>
                              </Styled(RefboxButton)>
                              <Styled(RefboxButton)
                                id="FK_magenta"
                                isPenalty={false}
                                key="FK"
                                onClick={[Function]}
                                teamColor="magenta"
                              >
                                <RefboxButton
                                  className="c8"
                                  id="FK_magenta"
                                  isPenalty={false}
                                  onClick={[Function]}
                                  teamColor="magenta"
                                >
                                  <styled.button
                                    className="c8"
                                    onClick={[Function]}
                                    teamColor="magenta"
                                  >
                                    <button
                                      className="c8 c9"
                                      onClick={[Function]}
                                    >
                                      FK
                                    </button>
                                  </styled.button>
                                </RefboxButton>
                              </Styled(RefboxButton)>
                              <Styled(RefboxButton)
                                id="GK_magenta"
                                isPenalty={false}
                                key="GK"
                                onClick={[Function]}
                                teamColor="magenta"
                              >
                                <RefboxButton
                                  className="c8"
                                  id="GK_magenta"
                                  isPenalty={false}
                                  onClick={[Function]}
                                  teamColor="magenta"
                                >
                                  <styled.button
                                    className="c8"
                                    onClick={[Function]}
                                    teamColor="magenta"
                                  >
                                    <button
                                      className="c8 c9"
                                      onClick={[Function]}
                                    >
                                      GK
                                    </button>
                                  </styled.button>
                                </RefboxButton>
                              </Styled(RefboxButton)>
                              <Styled(RefboxButton)
                                id="TI_magenta"
                                isPenalty={false}
                                key="TI"
                                onClick={[Function]}
                                teamColor="magenta"
                              >
                                <RefboxButton
                                  className="c8"
                                  id="TI_magenta"
                                  isPenalty={false}
                                  onClick={[Function]}
                                  teamColor="magenta"
                                >
                                  <styled.button
                                    className="c8"
                                    onClick={[Function]}
                                    teamColor="magenta"
                                  >
                                    <button
                                      className="c8 c9"
                                      onClick={[Function]}
                                    >
                                      TI
                                    </button>
                                  </styled.button>
                                </RefboxButton>
                              </Styled(RefboxButton)>
                              <Styled(RefboxButton)
                                id="C_magenta"
                                isPenalty={false}
                                key="C"
                                onClick={[Function]}
                                teamColor="magenta"
                              >
                                <RefboxButton
                                  className="c8"
                                  id="C_magenta"
                                  isPenalty={false}
                                  onClick={[Function]}
                                  teamColor="magenta"
                                >
                                  <styled.button
                                    className="c8"
                                    onClick={[Function]}
                                    teamColor="magenta"
                                  >
                                    <button
                                      className="c8 c9"
                                      onClick={[Function]}
                                    >
                                      C
                                    </button>
                                  </styled.button>
                                </RefboxButton>
                              </Styled(RefboxButton)>
                              <Styled(RefboxButton)
                                id="P_magenta"
                                isPenalty={false}
                                key="P"
                                onClick={[Function]}
                                teamColor="magenta"
                              >
                                <RefboxButton
                                  className="c8"
                                  id="P_magenta"
                                  isPenalty={false}
                                  onClick={[Function]}
                                  teamColor="magenta"
                                >
                                  <styled.button
                                    className="c8"
                                    onClick={[Function]}
                                    teamColor="magenta"
                                  >
                                    <button
                                      className="c8 c9"
                                      onClick={[Function]}
                                    >
                                      P
                                    </button>
                                  </styled.button>
                                </RefboxButton>
                              </Styled(RefboxButton)>
                            </div>
                          </styled.div>
                          <styled.div>
                            <div
                              className="c7"
                            >
                              <Styled(RefboxButton)
                                id="KO_cyan"
                                isPenalty={false}
                                key="KO"
                                onClick={[Function]}
                                teamColor="cyan"
                              >
                                <RefboxButton
                                  className="c8"
                                  id="KO_cyan"
                                  isPenalty={false}
                                  onClick={[Function]}
                                  teamColor="cyan"
                                >
                                  <styled.button
                                    className="c8"
                                    onClick={[Function]}
                                    teamColor="cyan"
                                  >
                                    <button
                                      className="c8 c10"
                                      onClick={[Function]}
                                    >
                                      KO
                                    </button>
                                  </styled.button>
                                </RefboxButton>
                              </Styled(RefboxButton)>
                              <Styled(RefboxButton)
                                id="FK_cyan"
                                isPenalty={false}
                                key="FK"
                                onClick={[Function]}
                                teamColor="cyan"
                              >
                                <RefboxButton
                                  className="c8"
                                  id="FK_cyan"
                                  isPenalty={false}
                                  onClick={[Function]}
                                  teamColor="cyan"
                                >
                                  <styled.button
                                    className="c8"
                                    onClick={[Function]}
                                    teamColor="cyan"
                                  >
                                    <button
                                      className="c8 c10"
                                      onClick={[Function]}
                                    >
                                      FK
                                    </button>
                                  </styled.button>
                                </RefboxButton>
                              </Styled(RefboxButton)>
                              <Styled(RefboxButton)
                                id="GK_cyan"
                                isPenalty={false}
                                key="GK"
                                onClick={[Function]}
                                teamColor="cyan"
                              >
                                <RefboxButton
                                  className="c8"
                                  id="GK_cyan"
                                  isPenalty={false}
                                  onClick={[Function]}
                                  teamColor="cyan"
                                >
                                  <styled.button
                                    className="c8"
                                    onClick={[Function]}
                                    teamColor="cyan"
                                  >
                                    <button
                                      className="c8 c10"
                                      onClick={[Function]}
                                    >
                                      GK
                                    </button>
                                  </styled.button>
                                </RefboxButton>
                              </Styled(RefboxButton)>
                              <Styled(RefboxButton)
                                id="TI_cyan"
                                isPenalty={false}
                                key="TI"
                                onClick={[Function]}
                                teamColor="cyan"
                              >
                                <RefboxButton
                                  className="c8"
                                  id="TI_cyan"
                                  isPenalty={false}
                                  onClick={[Function]}
                                  teamColor="cyan"
                                >
                                  <styled.button
                                    className="c8"
                                    onClick={[Function]}
                                    teamColor="cyan"
                                  >
                                    <button
                                      className="c8 c10"
                                      onClick={[Function]}
                                    >
                                      TI
                                    </button>
                                  </styled.button>
                                </RefboxButton>
                              </Styled(RefboxButton)>
                              <Styled(RefboxButton)
                                id="C_cyan"
                                isPenalty={false}
                                key="C"
                                onClick={[Function]}
                                teamColor="cyan"
                              >
                                <RefboxButton
                                  className="c8"
                                  id="C_cyan"
                                  isPenalty={false}
                                  onClick={[Function]}
                                  teamColor="cyan"
                                >
                                  <styled.button
                                    className="c8"
                                    onClick={[Function]}
                                    teamColor="cyan"
                                  >
                                    <button
                                      className="c8 c10"
                                      onClick={[Function]}
                                    >
                                      C
                                    </button>
                                  </styled.button>
                                </RefboxButton>
                              </Styled(RefboxButton)>
                              <Styled(RefboxButton)
                                id="P_cyan"
                                isPenalty={false}
                                key="P"
                                onClick={[Function]}
                                teamColor="cyan"
                              >
                                <RefboxButton
                                  className="c8"
                                  id="P_cyan"
                                  isPenalty={false}
                                  onClick={[Function]}
                                  teamColor="cyan"
                                >
                                  <styled.button
                                    className="c8"
                                    onClick={[Function]}
                                    teamColor="cyan"
                                  >
                                    <button
                                      className="c8 c10"
                                      onClick={[Function]}
                                    >
                                      P
                                    </button>
                                  </styled.button>
                                </RefboxButton>
                              </Styled(RefboxButton)>
                            </div>
                          </styled.div>
                        </div>
                      </styled.div>
                    </RefboxField>
                  </div>
                </Col>
                <Col
                  className="hidden-xs hidden-sm"
                  md={4}
                >
                  <div
                    className="col-md-4 hidden-xs hidden-sm"
                  >
                    <NotificationWindow
                      notification={null}
                      onDismiss={[Function]}
                    />
                  </div>
                </Col>
                <Col
                  className="hidden-xs hidden-sm"
                  md={4}
                  xs={12}
                >
                  <div
                    className="col-xs-12 col-md-4 hidden-xs hidden-sm"
                  >
                    <RefboxSettings
                      session="session"
                    >
                      <styled.div>
                        <div
                          className="c11"
                        >
                          <Styled(DropBall)
                            onClick={[Function]}
                          >
                            <DropBall
                              className="c12"
                              onClick={[Function]}
                            >
                              <styled.div
                                className="c12"
                              >
                                <div
                                  className="c12 c13"
                                >
                                  <styled.button
                                    id="drop-ball-button"
                                    onClick={[Function]}
                                  >
                                    <button
                                      className="c14"
                                      id="drop-ball-button"
                                      onClick={[Function]}
                                    >
                                      DB
                                    </button>
                                  </styled.button>
                                </div>
                              </styled.div>
                            </DropBall>
                          </Styled(DropBall)>
                          <styled.div>
                            <div
                              className="c15"
                            >
                              <InOutButton
                                onClick={[Function]}
                              >
                                <styled.div>
                                  <div
                                    className="c16"
                                  >
                                    <styled.button
                                      id="InOutButton__go-in-button"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="c17"
                                        id="InOutButton__go-in-button"
                                        onClick={[Function]}
                                      >
                                        Go in
                                      </button>
                                    </styled.button>
                                    <styled.button
                                      id="InOutButton__go-out-button"
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="c17"
                                        id="InOutButton__go-out-button"
                                        onClick={[Function]}
                                      >
                                        Go out
                                      </button>
                                    </styled.button>
                                  </div>
                                </styled.div>
                              </InOutButton>
                            </div>
                          </styled.div>
                        </div>
                      </styled.div>
                    </RefboxSettings>
                    <Styled(BottomBar)
                      activePage="settings"
                      changeActivePage={[Function]}
                      connectionStatus="connecting"
                      session="session"
                    >
                      <BottomBar
                        activePage="settings"
                        changeActivePage={[Function]}
                        className="c18"
                        connectionStatus="connecting"
                        session="session"
                      >
                        <styled.div
                          className="c18"
                        >
                          <div
                            className="c18 c19"
                          >
                            <ConnectionBar
                              connectionStatus="connecting"
                            >
                              <styled.div
                                background={
                                  Array [
                                    "
                                          background: ",
                                    [Function],
                                    ";
                                        ",
                                  ]
                                }
                              >
                                <div
                                  className="c20"
                                >
                                  <styled.p>
                                    <p
                                      className="c21"
                                    >
                                      connecting...
                                    </p>
                                  </styled.p>
                                  <styled.div>
                                    <div
                                      className="c22"
                                    >
                                      <FontAwesomeIcon
                                        border={false}
                                        className=""
                                        fixedWidth={false}
                                        flip={null}
                                        icon={
                                          Object {
                                            "icon": Array [
                                              512,
                                              512,
                                              Array [],
                                              "f110",
                                              "M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z",
                                            ],
                                            "iconName": "spinner",
                                            "prefix": "fas",
                                          }
                                        }
                                        listItem={false}
                                        mask={null}
                                        name=""
                                        pull={null}
                                        pulse={false}
                                        rotation={null}
                                        size="2x"
                                        spin={true}
                                        symbol={false}
                                        transform={null}
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="svg-inline--fa fa-spinner fa-w-16 fa-spin fa-2x "
                                          data-icon="spinner"
                                          data-prefix="fas"
                                          role="img"
                                          style={Object {}}
                                          viewBox="0 0 512 512"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            d="M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z"
                                            fill="currentColor"
                                            style={Object {}}
                                          />
                                        </svg>
                                      </FontAwesomeIcon>
                                    </div>
                                  </styled.div>
                                </div>
                              </styled.div>
                            </ConnectionBar>
                            <styled.div>
                              <div
                                className="c23"
                              >
                                <styled.div>
                                  <div
                                    className="c24"
                                  >
                                    <Styled(styled.button)
                                      enabled={true}
                                      id="bottom-bar__start-button"
                                      onClick={[Function]}
                                    >
                                      <styled.button
                                        className="c25"
                                        enabled={true}
                                        id="bottom-bar__start-button"
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="c25 c26"
                                          id="bottom-bar__start-button"
                                          onClick={[Function]}
                                        >
                                          <FontAwesomeIcon
                                            border={false}
                                            className=""
                                            fixedWidth={false}
                                            flip={null}
                                            icon={
                                              Object {
                                                "icon": Array [
                                                  448,
                                                  512,
                                                  Array [],
                                                  "f04b",
                                                  "M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z",
                                                ],
                                                "iconName": "play",
                                                "prefix": "fas",
                                              }
                                            }
                                            listItem={false}
                                            mask={null}
                                            name=""
                                            pull={null}
                                            pulse={false}
                                            rotation={null}
                                            size={null}
                                            spin={false}
                                            symbol={false}
                                            transform={null}
                                          >
                                            <svg
                                              aria-hidden="true"
                                              className="svg-inline--fa fa-play fa-w-14 "
                                              data-icon="play"
                                              data-prefix="fas"
                                              role="img"
                                              style={Object {}}
                                              viewBox="0 0 448 512"
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z"
                                                fill="currentColor"
                                                style={Object {}}
                                              />
                                            </svg>
                                          </FontAwesomeIcon>
                                        </button>
                                      </styled.button>
                                    </Styled(styled.button)>
                                    <Styled(styled.button)
                                      enabled={true}
                                      id="bottom-bar__change-page-button"
                                      onClick={[Function]}
                                    >
                                      <styled.button
                                        className="c27"
                                        enabled={true}
                                        id="bottom-bar__change-page-button"
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="c27 c26"
                                          id="bottom-bar__change-page-button"
                                          onClick={[Function]}
                                        >
                                          <FontAwesomeIcon
                                            border={false}
                                            className=""
                                            fixedWidth={false}
                                            flip={null}
                                            icon={
                                              Object {
                                                "icon": Array [
                                                  512,
                                                  512,
                                                  Array [],
                                                  "f009",
                                                  "M296 32h192c13.255 0 24 10.745 24 24v160c0 13.255-10.745 24-24 24H296c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24zm-80 0H24C10.745 32 0 42.745 0 56v160c0 13.255 10.745 24 24 24h192c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24zM0 296v160c0 13.255 10.745 24 24 24h192c13.255 0 24-10.745 24-24V296c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm296 184h192c13.255 0 24-10.745 24-24V296c0-13.255-10.745-24-24-24H296c-13.255 0-24 10.745-24 24v160c0 13.255 10.745 24 24 24z",
                                                ],
                                                "iconName": "th-large",
                                                "prefix": "fas",
                                              }
                                            }
                                            listItem={false}
                                            mask={null}
                                            name=""
                                            pull={null}
                                            pulse={false}
                                            rotation={null}
                                            size={null}
                                            spin={false}
                                            symbol={false}
                                            transform={null}
                                          >
                                            <svg
                                              aria-hidden="true"
                                              className="svg-inline--fa fa-th-large fa-w-16 "
                                              data-icon="th-large"
                                              data-prefix="fas"
                                              role="img"
                                              style={Object {}}
                                              viewBox="0 0 512 512"
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M296 32h192c13.255 0 24 10.745 24 24v160c0 13.255-10.745 24-24 24H296c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24zm-80 0H24C10.745 32 0 42.745 0 56v160c0 13.255 10.745 24 24 24h192c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24zM0 296v160c0 13.255 10.745 24 24 24h192c13.255 0 24-10.745 24-24V296c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm296 184h192c13.255 0 24-10.745 24-24V296c0-13.255-10.745-24-24-24H296c-13.255 0-24 10.745-24 24v160c0 13.255 10.745 24 24 24z"
                                                fill="currentColor"
                                                style={Object {}}
                                              />
                                            </svg>
                                          </FontAwesomeIcon>
                                        </button>
                                      </styled.button>
                                    </Styled(styled.button)>
                                  </div>
                                </styled.div>
                                <Styled(styled.button)
                                  enabled={true}
                                  id="bottom-bar__stop-button"
                                  onClick={[Function]}
                                >
                                  <styled.button
                                    className="c28"
                                    enabled={true}
                                    id="bottom-bar__stop-button"
                                    onClick={[Function]}
                                  >
                                    <button
                                      className="c28 c26"
                                      id="bottom-bar__stop-button"
                                      onClick={[Function]}
                                    >
                                      <FontAwesomeIcon
                                        border={false}
                                        className=""
                                        color="red"
                                        fixedWidth={false}
                                        flip={null}
                                        icon={
                                          Object {
                                            "icon": Array [
                                              448,
                                              512,
                                              Array [],
                                              "f04d",
                                              "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z",
                                            ],
                                            "iconName": "stop",
                                            "prefix": "fas",
                                          }
                                        }
                                        listItem={false}
                                        mask={null}
                                        name=""
                                        pull={null}
                                        pulse={false}
                                        rotation={null}
                                        size={null}
                                        spin={false}
                                        symbol={false}
                                        transform={null}
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="svg-inline--fa fa-stop fa-w-14 "
                                          color="red"
                                          data-icon="stop"
                                          data-prefix="fas"
                                          role="img"
                                          style={Object {}}
                                          viewBox="0 0 448 512"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"
                                            fill="currentColor"
                                            style={Object {}}
                                          />
                                        </svg>
                                      </FontAwesomeIcon>
                                    </button>
                                  </styled.button>
                                </Styled(styled.button)>
                              </div>
                            </styled.div>
                          </div>
                        </styled.div>
                      </BottomBar>
                    </Styled(BottomBar)>
                  </div>
                </Col>
                <Col
                  className="hidden-md hidden-lg hidden-xl"
                  xs={12}
                >
                  <div
                    className="col-xs-12 hidden-md hidden-lg hidden-xl"
                  >
                    <NotificationWindow
                      notification={null}
                      onDismiss={[Function]}
                    />
                    <Styled(BottomBar)
                      activePage="settings"
                      changeActivePage={[Function]}
                      connectionStatus="connecting"
                      session="session"
                    >
                      <BottomBar
                        activePage="settings"
                        changeActivePage={[Function]}
                        className="c18"
                        connectionStatus="connecting"
                        session="session"
                      >
                        <styled.div
                          className="c18"
                        >
                          <div
                            className="c18 c19"
                          >
                            <ConnectionBar
                              connectionStatus="connecting"
                            >
                              <styled.div
                                background={
                                  Array [
                                    "
                                          background: ",
                                    [Function],
                                    ";
                                        ",
                                  ]
                                }
                              >
                                <div
                                  className="c20"
                                >
                                  <styled.p>
                                    <p
                                      className="c21"
                                    >
                                      connecting...
                                    </p>
                                  </styled.p>
                                  <styled.div>
                                    <div
                                      className="c22"
                                    >
                                      <FontAwesomeIcon
                                        border={false}
                                        className=""
                                        fixedWidth={false}
                                        flip={null}
                                        icon={
                                          Object {
                                            "icon": Array [
                                              512,
                                              512,
                                              Array [],
                                              "f110",
                                              "M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z",
                                            ],
                                            "iconName": "spinner",
                                            "prefix": "fas",
                                          }
                                        }
                                        listItem={false}
                                        mask={null}
                                        name=""
                                        pull={null}
                                        pulse={false}
                                        rotation={null}
                                        size="2x"
                                        spin={true}
                                        symbol={false}
                                        transform={null}
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="svg-inline--fa fa-spinner fa-w-16 fa-spin fa-2x "
                                          data-icon="spinner"
                                          data-prefix="fas"
                                          role="img"
                                          style={Object {}}
                                          viewBox="0 0 512 512"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            d="M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z"
                                            fill="currentColor"
                                            style={Object {}}
                                          />
                                        </svg>
                                      </FontAwesomeIcon>
                                    </div>
                                  </styled.div>
                                </div>
                              </styled.div>
                            </ConnectionBar>
                            <styled.div>
                              <div
                                className="c23"
                              >
                                <styled.div>
                                  <div
                                    className="c24"
                                  >
                                    <Styled(styled.button)
                                      enabled={true}
                                      id="bottom-bar__start-button"
                                      onClick={[Function]}
                                    >
                                      <styled.button
                                        className="c25"
                                        enabled={true}
                                        id="bottom-bar__start-button"
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="c25 c26"
                                          id="bottom-bar__start-button"
                                          onClick={[Function]}
                                        >
                                          <FontAwesomeIcon
                                            border={false}
                                            className=""
                                            fixedWidth={false}
                                            flip={null}
                                            icon={
                                              Object {
                                                "icon": Array [
                                                  448,
                                                  512,
                                                  Array [],
                                                  "f04b",
                                                  "M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z",
                                                ],
                                                "iconName": "play",
                                                "prefix": "fas",
                                              }
                                            }
                                            listItem={false}
                                            mask={null}
                                            name=""
                                            pull={null}
                                            pulse={false}
                                            rotation={null}
                                            size={null}
                                            spin={false}
                                            symbol={false}
                                            transform={null}
                                          >
                                            <svg
                                              aria-hidden="true"
                                              className="svg-inline--fa fa-play fa-w-14 "
                                              data-icon="play"
                                              data-prefix="fas"
                                              role="img"
                                              style={Object {}}
                                              viewBox="0 0 448 512"
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z"
                                                fill="currentColor"
                                                style={Object {}}
                                              />
                                            </svg>
                                          </FontAwesomeIcon>
                                        </button>
                                      </styled.button>
                                    </Styled(styled.button)>
                                    <Styled(styled.button)
                                      enabled={true}
                                      id="bottom-bar__change-page-button"
                                      onClick={[Function]}
                                    >
                                      <styled.button
                                        className="c27"
                                        enabled={true}
                                        id="bottom-bar__change-page-button"
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="c27 c26"
                                          id="bottom-bar__change-page-button"
                                          onClick={[Function]}
                                        >
                                          <FontAwesomeIcon
                                            border={false}
                                            className=""
                                            fixedWidth={false}
                                            flip={null}
                                            icon={
                                              Object {
                                                "icon": Array [
                                                  512,
                                                  512,
                                                  Array [],
                                                  "f009",
                                                  "M296 32h192c13.255 0 24 10.745 24 24v160c0 13.255-10.745 24-24 24H296c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24zm-80 0H24C10.745 32 0 42.745 0 56v160c0 13.255 10.745 24 24 24h192c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24zM0 296v160c0 13.255 10.745 24 24 24h192c13.255 0 24-10.745 24-24V296c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm296 184h192c13.255 0 24-10.745 24-24V296c0-13.255-10.745-24-24-24H296c-13.255 0-24 10.745-24 24v160c0 13.255 10.745 24 24 24z",
                                                ],
                                                "iconName": "th-large",
                                                "prefix": "fas",
                                              }
                                            }
                                            listItem={false}
                                            mask={null}
                                            name=""
                                            pull={null}
                                            pulse={false}
                                            rotation={null}
                                            size={null}
                                            spin={false}
                                            symbol={false}
                                            transform={null}
                                          >
                                            <svg
                                              aria-hidden="true"
                                              className="svg-inline--fa fa-th-large fa-w-16 "
                                              data-icon="th-large"
                                              data-prefix="fas"
                                              role="img"
                                              style={Object {}}
                                              viewBox="0 0 512 512"
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M296 32h192c13.255 0 24 10.745 24 24v160c0 13.255-10.745 24-24 24H296c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24zm-80 0H24C10.745 32 0 42.745 0 56v160c0 13.255 10.745 24 24 24h192c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24zM0 296v160c0 13.255 10.745 24 24 24h192c13.255 0 24-10.745 24-24V296c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm296 184h192c13.255 0 24-10.745 24-24V296c0-13.255-10.745-24-24-24H296c-13.255 0-24 10.745-24 24v160c0 13.255 10.745 24 24 24z"
                                                fill="currentColor"
                                                style={Object {}}
                                              />
                                            </svg>
                                          </FontAwesomeIcon>
                                        </button>
                                      </styled.button>
                                    </Styled(styled.button)>
                                  </div>
                                </styled.div>
                                <Styled(styled.button)
                                  enabled={true}
                                  id="bottom-bar__stop-button"
                                  onClick={[Function]}
                                >
                                  <styled.button
                                    className="c28"
                                    enabled={true}
                                    id="bottom-bar__stop-button"
                                    onClick={[Function]}
                                  >
                                    <button
                                      className="c28 c26"
                                      id="bottom-bar__stop-button"
                                      onClick={[Function]}
                                    >
                                      <FontAwesomeIcon
                                        border={false}
                                        className=""
                                        color="red"
                                        fixedWidth={false}
                                        flip={null}
                                        icon={
                                          Object {
                                            "icon": Array [
                                              448,
                                              512,
                                              Array [],
                                              "f04d",
                                              "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z",
                                            ],
                                            "iconName": "stop",
                                            "prefix": "fas",
                                          }
                                        }
                                        listItem={false}
                                        mask={null}
                                        name=""
                                        pull={null}
                                        pulse={false}
                                        rotation={null}
                                        size={null}
                                        spin={false}
                                        symbol={false}
                                        transform={null}
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="svg-inline--fa fa-stop fa-w-14 "
                                          color="red"
                                          data-icon="stop"
                                          data-prefix="fas"
                                          role="img"
                                          style={Object {}}
                                          viewBox="0 0 448 512"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"
                                            fill="currentColor"
                                            style={Object {}}
                                          />
                                        </svg>
                                      </FontAwesomeIcon>
                                    </button>
                                  </styled.button>
                                </Styled(styled.button)>
                              </div>
                            </styled.div>
                          </div>
                        </styled.div>
                      </BottomBar>
                    </Styled(BottomBar)>
                    <SupportBar />
                  </div>
                </Col>
              </div>
            </Row>
          </div>
        </styled.div>
      </div>
    </styled.div>
  </ThemeProvider>
</App>
`;

exports[`App.js the user submits the login form the user inputs an invalid token should match snapshot 1`] = `
.c7 {
  background: #ff6347;
  padding: 0.6rem 3rem 0.6rem 0.6rem;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  color: #FFFFFF;
  position: relative;
}

.c8 {
  text-transform: uppercase;
  margin: 0;
  display: block;
  font-size: 1.4rem;
}

.c0 {
  background: #c0c0c0;
  height: 100%;
  padding-top: 10%;
}

.c1 {
  margin: 0 auto;
  border: 0.1rem solid;
  border-bottom: none;
  background: #ededed;
  width: 85%;
  padding: 1rem;
  text-align: center;
}

.c2 {
  font-size: 1.5rem;
}

.c4 {
  color: #ff6347;
}

.c3 {
  margin-top: 1rem;
}

.c3[type="text"] {
  border: 0.1rem solid;
  width: 100%;
  padding: 1.75rem;
  font-size: 1.5rem;
}

.c5 {
  margin-top: 1rem;
  background-color: #FFFFFF;
  border: 0.1rem solid;
  width: 100%;
  height: 5rem;
  font-size: 1.5rem;
}

.c5:active {
  background-color: #ededed;
}

.c6 {
  padding: 0;
  border-bottom: 0.1rem solid;
}

<App>
  <ThemeProvider
    theme={
      Object {
        "button": "#ededed",
        "buttonActive": "#c0c0c0",
        "buttonBorder": "#ededed",
        "buttonBorderStyle": "solid",
        "buttonBorderStyleActive": "inset",
        "connectionStatusText": "#FFFFFF",
        "error": "#ff6347",
        "loginButton": "#FFFFFF",
        "loginButtonActive": "#ededed",
        "loginFormBackground": "#ededed",
        "loginScreenBackground": "#c0c0c0",
        "refboxCyan": "#00ffff",
        "refboxCyanActive": "#00c8c8",
        "refboxCyanBorder": "#00c8c8",
        "refboxMagenta": "#ff00ff",
        "refboxMagentaActive": "#c800c8",
        "refboxMagentaBorder": "#c800c8",
        "success": "#45bc21",
        "turtleEnableBar": "#ededed",
        "warning": "#ffcc00",
      }
    }
  >
    <AuthenticationScreen
      connectionStatus="disconnected"
      notification="Error message"
      onSubmit={[Function]}
    >
      <styled.div>
        <div
          className="c0"
        >
          <styled.div>
            <div
              className="c1"
            >
              <styled.label>
                <label
                  className="c2"
                >
                  Token:
                </label>
              </styled.label>
              <TokenInput
                id="auth-screen_token-input"
                onChange={[Function]}
                placeholder="Enter the TRC token"
                type="text"
              >
                <input
                  className="c3"
                  id="auth-screen_token-input"
                  onChange={[Function]}
                  placeholder="Enter the TRC token"
                  type="text"
                />
              </TokenInput>
              <WarningLabel
                id="auth-screen__warning-label"
              >
                <styled.label
                  className="c4"
                  id="auth-screen__warning-label"
                >
                  <label
                    className="c4 c2"
                    id="auth-screen__warning-label"
                  >
                    Error message
                  </label>
                </styled.label>
              </WarningLabel>
              <LoginButton
                id="auth-screen__login-button"
                onClick={[Function]}
              >
                <button
                  className="c5"
                  id="auth-screen__login-button"
                  onClick={[Function]}
                >
                  Log in
                </button>
              </LoginButton>
            </div>
          </styled.div>
          <Styled(styled.div)>
            <styled.div
              className="c6"
            >
              <div
                className="c6 c1"
              >
                <ConnectionBar
                  connectionStatus="disconnected"
                >
                  <styled.div
                    background={
                      Array [
                        "
                              background: ",
                        [Function],
                        ";
                            ",
                      ]
                    }
                  >
                    <div
                      className="c7"
                    >
                      <styled.p>
                        <p
                          className="c8"
                        >
                          disconnected
                        </p>
                      </styled.p>
                    </div>
                  </styled.div>
                </ConnectionBar>
              </div>
            </styled.div>
          </Styled(styled.div)>
        </div>
      </styled.div>
    </AuthenticationScreen>
  </ThemeProvider>
</App>
`;
